"""
Django settings for BIP project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import configparser

BASE_DIR = Path(__file__).resolve().parent.parent

# SETUP CONFIG 
config = configparser.ConfigParser()
config.read(BASE_DIR / 'config.ini')

ALLOWED_HOSTS=["*"]


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get('SETTING','SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean('SETTING','DEBUG')

# # CSRF SETTING
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# CORS
CORS_ORIGIN_ALLOW_ALL   = True
CORS_ALLOWED_ORIGINS    = config.get('CORS', 'ALLOWED_ORIGINS').split(', ')
CORS_ALLOW_CREDENTIALS  = config.getboolean('CORS', 'ALLOW_CREDENTIALS')
CORS_ALLOW_METHODS      = config.get('CORS', 'ALLOW_METHODS').split(', ')
CORS_EXPOSE_HEADERS     = config.get('CORS', 'EXPOSE_HEADERS').split(', ')

SPECTACULAR_SETTINGS = {
    'SCHEMA_PATH_PREFIX': '/api/',
    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'COMPONENT_SPLIT_REQUEST': True,
    'TITLE': config.get('SWAGGER','TITLE'),
    'DESCRIPTION': config.get('SWAGGER','DESCRIPTION'),
    'VERSION': config.get('SWAGGER','VERSION'),
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
}


# User Models
AUTH_USER_MODEL = 'ext_user.User'
AUTH_PROFILE_MODULE= 'ext_user.User'
LOGIN_REDIRECT_URL = config.get('FRONTEND',"LINK")
# URLS start
ROOT_URLCONF = 'BIP.urls'

# SOCIAL AUTH

# Target User Auth 
SOCIAL_AUTH_USER_MODEL = 'ext_user.User'
SOCIAL_AUTH_URL_NAMESPACE = 'social'

# Setup client key
# https://python-social-auth.readthedocs.io/en/latest/backends/google.html#google-oauth2
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config.get('GoogleOAuth','CLIENT_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config.get('GoogleOAuth','CLIENT_SECRET')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [    
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile'
]

SOCIAL_AUTH_PIPELINE =(
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'ext_user.pipeline.get_avatar',
)

# add GoogleOAuth2 to Authentication
# https://python-social-auth.readthedocs.io/en/latest/configuration/django.html
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
] + [
    'ext_user',                 # Extending User
    'social_django',            # Social OAuth
    'corsheaders',              # CORS
    'rest_framework',           # REST_API
    # SWAGGER
    'drf_spectacular',
    'drf_spectacular_sidecar', 
    'manajemen_sessions',        # Session Management
    'django_filters',           # For filtering data
] + [
    'pekerti'
]
MIDDLEWARE = [
    # Cross ORigin Source Middleware 
    'corsheaders.middleware.CorsMiddleware',
    # Default Middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ]+[
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'BIP.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if (config.getboolean('MYSQL', 'IS_MYSQL') == True):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config.get("MYSQL",'NAME'),
            'HOST': config.get("MYSQL",'HOST'),
            'PORT': config.get("MYSQL",'PORT'),
            'USER': config.get("MYSQL",'USER'),
            'PASSWORD': config.get("MYSQL",'PASSWORD'),
        }
    }
else:
    DATABASES = { 'default' : {'ENGINE': 'django.db.backends.sqlite3','NAME': BASE_DIR / 'db.sqlite3'} }



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_ROOT = BASE_DIR / "dokumen"
MEDIA_URL  = "/dokumen/"
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
